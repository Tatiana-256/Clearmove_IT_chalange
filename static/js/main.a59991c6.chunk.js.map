{"version":3,"sources":["components/loader/loader.module.css","components/InputComponent.tsx","components/loader/LoaderComponent.tsx","components/Result.tsx","components/BoxResultsComponent.tsx","components/data/data.ts","components/InputContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","InputComponent","onItemChange","event","props","currentTarget","value","this","placeholder","className","styleForInput","onChange","React","Component","Loader","styles","position","loader","Result","styleForResults","result","BoxResults","data","map","r","key","id","name","dataApi","searchString","Promise","res","rej","setTimeout","filter","word","indexOf","InputContainer","state","itemName","loading","setState","prevProps","prevState","snapshot","callback","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a59991c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"position\":\"loader_position__3qAsp\",\"loader\":\"loader_loader__2OccQ\",\"spin\":\"loader_spin__2olnc\"};","import React from 'react'\r\nimport './Theme/Theme.css'\r\n\r\n\r\ntype PropsType = {\r\n    onItemChange: (inputLetter: string)=> void,\r\n    value: string,\r\n    styleForInput: string\r\n\r\n}\r\n\r\nclass InputComponent extends React.Component<PropsType> {\r\n\r\n    onItemChange = (event: any) => {\r\n      this.props.onItemChange(event.currentTarget.value)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <input\r\n                value={this.props.value}\r\n                placeholder='Type your request'\r\n                className={`${this.props.styleForInput}`}\r\n                onChange={this.onItemChange} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default InputComponent","import React from 'react'\r\nimport styles from './loader.module.css'\r\n\r\nconst Loader =()=>{\r\n    return <div className={styles.position}>\r\n        <div className={styles.loader}/>\r\n    </div>\r\n}\r\n\r\nexport default Loader","import React from 'react'\r\n\r\n\r\ntype PropsType = {\r\n    result: string\r\n    styleForResults: string\r\n}\r\n\r\nconst Result = (props: PropsType) => {\r\n    return <div className={`${props.styleForResults}`}>\r\n        {props.result}\r\n\r\n    </div>\r\n}\r\n\r\nexport default Result","import React from 'react'\r\nimport Result from \"./Result\";\r\nimport {dataType} from \"./data/data\";\r\n\r\n\r\ntype PropsType = {\r\n    data: Array<dataType>\r\n    styleForResults: string\r\n}\r\n\r\n\r\nconst BoxResults = (props: PropsType) => {\r\n    return <div className='box'>\r\n        {props.data.map((r: dataType) =>\r\n            <Result key={r.id} result={r.name} styleForResults={props.styleForResults}/>\r\n        )}\r\n    </div>\r\n}\r\n\r\nexport default BoxResults","export type dataType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\nexport const data: Array<dataType> = [\r\n    {name: \"find\", id: 1},\r\n    {name: \"connection\", id: 2},\r\n    {name: \"cursor\", id: 3},\r\n    {name: \"database Instance\", id: 4},\r\n    {name: \"deterministic\", id: 5},\r\n    {name: \"application\", id: 6},\r\n    {name: \"compile\", id: 7},\r\n    {name: \"siblings\", id: 8},\r\n    {name: \"syntax extension\", id: 9},\r\n    {name: \"parent element\", id: 10},\r\n    {name: \"open source library\", id: 11},\r\n\r\n]\r\nexport const dataApi = {\r\n\r\n   async getData(searchString: string): Promise<Array<dataType>> {\r\n       return new Promise((res, rej) => {\r\n           if(searchString) {\r\n               setTimeout(() => {\r\n               let result = data.filter((word:dataType) => word.name.indexOf(searchString) > -1)\r\n               res(result)\r\n               }, 1500)\r\n           } else res([])\r\n\r\n       })\r\n    }\r\n}\r\n","import React from 'react';\nimport '../App.css';\n\n\nimport InputComponent from \"./InputComponent\";\nimport Loader from './loader/LoaderComponent';\nimport BoxResults from \"./BoxResultsComponent\";\nimport {dataApi, dataType} from \"./data/data\";\n\n\ntype PropsType = {\n    callback: (data: Array<dataType>) => void\n}\n\n\nclass InputContainer extends React.Component<PropsType> {\n\n\n    state = {\n        itemName: '',\n        data: [],\n        loading: false,\n        styleForInput: 'blueThemeInput',\n        styleForResults: 'blueThemeBox',\n\n    }\n\n    onItemChange = (value: string) => {\n        this.setState({\n            itemName: value\n        })\n    }\n\n    async componentDidUpdate(prevProps: Readonly<{}>, prevState: AppStateType, snapshot?: any) {\n        if (prevState.itemName !== this.state.itemName) {\n            this.setState({loading: true})\n            const data = await dataApi.getData(this.state.itemName)\n            this.setState({data, loading: false})\n            this.props.callback(data)\n        }\n    }\n\n\n    render() {\n\n        return (\n            <div className='searchContainer'>\n                <h1>Challenge project of Clearmove</h1>\n                <InputComponent\n                    value={this.state.itemName}\n                    styleForInput={this.state.styleForInput}\n                    onItemChange={this.onItemChange}/>\n                {this.state.loading ?\n                    <Loader/> :\n                    <BoxResults\n                        styleForResults={this.state.styleForResults}\n                        data={this.state.data}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default InputContainer;\n\n\n\ntype AppStateType = {\n    itemName: string,\n    data: Array<dataType>,\n    loading: boolean\n    styleForInput: '',\n    styleForResults: '',\n}","import React from 'react';\nimport './App.css';\nimport InputContainer from \"./components/InputContainer\";\nimport {dataType} from \"./components/data/data\";\n\nclass App extends React.Component {\n\n    callback(data: Array<dataType>) {\n        console.log(data)\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n               <InputContainer callback={this.callback} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}